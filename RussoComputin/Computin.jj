options {
    STATIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(Computin)

package RussoComputin;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.StringReader;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;


public class Computin {

    private List<Token> errorTokens = new ArrayList<>();
    private List<int[][]> expectedTokenSequencesVal = new ArrayList<>();
    private List<String[]> tokenImageVal = new ArrayList<>();
    private boolean errorHapenned = false;

    // Getter para errorTokens
    public List<Token> getErrorTokens() {
        return errorTokens;
    }

    // Setter para errorTokens
    public void setErrorTokens(List<Token> errorTokens) {
        this.errorTokens.addAll(errorTokens); // Adiciona aos tokens de erro
    }

    // Getter para errorHapenned
    public boolean isErrorHapenned() {
        return errorHapenned;
    }

    // Setter para errorHapenned
    public void setErrorHapenned(boolean errorHapenned) {
        this.errorHapenned = errorHapenned;
    }

    // Getter para expectedTokenSequencesVal
    public List<int[][]> getExpectedTokenSequencesVal() {
        return expectedTokenSequencesVal;
    }

    // Setter para expectedTokenSequencesVal
    public void addExpectedTokenSequences(List<int[][]> expectedTokenSequences) {
        this.expectedTokenSequencesVal.addAll(expectedTokenSequences);
    }

    // Getter para tokenImageVal
    public List<String[]> getTokenImageVal() {
        return tokenImageVal;
    }

    // Setter para tokenImageVal
    public void addTokenImage(List<String[]> tokenImage) {
        this.tokenImageVal.addAll(tokenImage);
    }
    
  public static void main(String[] args) throws ParseException, IOException {
    if (args.length == 0) {
      SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
          new ComputinGUI().setVisible(true);
        }
      });
    } else {
      String input = new String(Files.readAllBytes(Paths.get(args[0])));
      Computin parser = new Computin(new java.io.StringReader(input));
      try {
        parser.start();
        System.out.println("\nComunismo gostou disso camarada!");
      } catch (ParseException | TokenMgrError e) {
        System.err.println("\nErro: " + e.getMessage());
      }
    }
  }
}


class ComputinGUI extends JFrame {
  private JTextPane codeArea;
  private JTextArea outputArea;
  private StyleContext styleContext;
  private StyledDocument doc;
  private Style errorStyle;
  private int lineCount = 0;
  private int tokenCount = 0;

  public ComputinGUI() {
    configureInterface();
    configureStyles();
    configureListeners();
  }

  private void configureInterface() {
    setTitle("RussoComputin - Interface de Interação");
    setSize(800, 600);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    codeArea = new JTextPane();
    codeArea.setFont(new Font("Monospaced", Font.PLAIN, 14));
    JScrollPane codeScrollPane = new JScrollPane(codeArea);
    codeScrollPane.setRowHeaderView(new LineNumberView(codeArea));

    outputArea = new JTextArea();
    outputArea.setEditable(false);
    outputArea.setFont(new Font("Monospaced", Font.PLAIN, 14));
    
    JButton parseButton = new JButton("Analisar");
    parseButton.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        analyzeCode();
      }
    });

    JPanel panel = new JPanel(new BorderLayout());
    panel.add(codeScrollPane, BorderLayout.CENTER);
    panel.add(parseButton, BorderLayout.SOUTH);

    JPanel outputPanel = new JPanel(new BorderLayout());
    outputPanel.add(new JScrollPane(outputArea), BorderLayout.CENTER);

    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, panel, outputPanel);
    splitPane.setResizeWeight(0.7);
    add(splitPane);
  }

  private void configureStyles() {
    styleContext = StyleContext.getDefaultStyleContext();
    doc = codeArea.getStyledDocument();
    errorStyle = styleContext.addStyle("error", null);
    StyleConstants.setForeground(errorStyle, Color.RED);
    StyleConstants.setUnderline(errorStyle, true);
    StyleConstants.setBold(errorStyle, true);
  }

  private void configureListeners() {
    codeArea.getDocument().addDocumentListener(new DocumentListener() {
      public void insertUpdate(DocumentEvent e) { updateLineNumbers(); }
      public void removeUpdate(DocumentEvent e) { updateLineNumbers(); }
      public void changedUpdate(DocumentEvent e) { updateLineNumbers(); }
      
      private void updateLineNumbers() {
        codeArea.repaint();
        getContentPane().repaint();
      }
    });
  }

  private class LineNumberView extends JComponent {
    private final JTextPane textPane;

    public LineNumberView(JTextPane textPane) {
      this.textPane = textPane;
      setPreferredSize(new Dimension(50, 0));
    }

    @Override
    protected void paintComponent(Graphics g) {
      super.paintComponent(g);
      Element root = textPane.getDocument().getDefaultRootElement();
      FontMetrics fm = textPane.getFontMetrics(textPane.getFont());
      
      g.setColor(getBackground());
      g.fillRect(0, 0, getWidth(), getHeight());
      g.setColor(Color.GRAY);

      int lineCount = root.getElementCount();
      for (int i = 0; i < lineCount; i++) {
        try {
          int y = textPane.modelToView(root.getElement(i).getStartOffset()).y;
          String number = String.valueOf(i + 1);
          g.drawString(number, getWidth() - fm.stringWidth(number) - 5, y + fm.getAscent());
        } catch (Exception e) {}
      }

      setPreferredSize(new Dimension(50, lineCount * fm.getHeight()));
      revalidate();
    }
  }

  public void analyzeCode() {
	clearErrors();
    Computin parser = new Computin(new StringReader(codeArea.getText()));
    try {
      parser.start();
  	} catch (ParseException ex) {
        //  	    System.out.println("Erro no token NO CATCH: " + ex.currentToken);
  	    // Lançar aqui pra cima uma lista de exception uma só vez
		// Entao o do while vai pegando os erros e vai jogando pra essa lista
		// so que so dispara uma vez, e aqui no catch pega
		//outputArea.setText("Erro de análise comunista: " + geraMensagemErro(ex.currentToken, ex.expectedTokenSequences, ex.tokenImage));
		//highlightError(ex.currentToken);
//    } catch (ParserErrorException ex) {
//    	for (Token token : ex.getErrorTokens()) {
//    	    System.out.println("Erro durante a declaração:" + token.image);
//        	highlightError(token);
//    	}
//    }
	}
	if (parser.isErrorHapenned()) {
    StringBuilder str = new StringBuilder();
    str.append("Erro de análise comunista\n");

    // Iterando pelos tokens de erro
    for (int i = 0; i < parser.getErrorTokens().size(); i++) {
        Token token = parser.getErrorTokens().get(i);
        // Adicionando expectedTokenSequences e tokenImage para esse token
        int[][] expectedTokens = parser.getExpectedTokenSequencesVal().get(i); // Array 2D de expected tokens
        String[] tokenImages = parser.getTokenImageVal().get(i); // Array de imagens de tokens

        
		highlightError(token);
        str.append(geraMensagemErro(token, expectedTokens, tokenImages));
    }

    // Definindo o texto da área de saída
    outputArea.setText(str.toString());
} else {
    outputArea.setText("Comunismo gostou disto camarada!");
}
  }

  public void highlightError(Token tokenErrado) {
	    try {
	        // Obter posição absoluta no documento
	        int linha = tokenErrado.beginLine - 1;
	        int coluna = tokenErrado.beginColumn - 1;
	        
	        Element root = doc.getDefaultRootElement();
	        Element lineElement = root.getElement(linha);
	        int startOffset = lineElement.getStartOffset() + coluna;
	        int endOffset = startOffset + tokenErrado.image.length();
	        
	        // Aplicar estilo
	        doc.setCharacterAttributes(startOffset, endOffset - startOffset, errorStyle, false);
	        
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	}

  private void clearErrors() {
    doc.setCharacterAttributes(0, doc.getLength(), 
        styleContext.getStyle(StyleContext.DEFAULT_STYLE), true);
  }

  // Função que calcula a distância de Levenshtein entre duas strings
  public static int calculaSimilaridade(String s1, String s2) {
    int[][] dp = new int[s1.length() + 1][s2.length() + 1];
    for (int i = 0; i <= s1.length(); i++) {
      for (int j = 0; j <= s2.length(); j++) {
        if (i == 0) dp[i][j] = j;
        else if (j == 0) dp[i][j] = i;
        else dp[i][j] = Math.min(
          dp[i - 1][j - 1] + (s1.charAt(i - 1) == s2.charAt(j - 1) ? 0 : 1),
          Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1)
        );
      }
    }
    return dp[s1.length()][s2.length()];
  }

  // Encontra o token mais similar ao token inesperado
  public static String encontraTokenSimilar(String tokenInesperado, String[] tokenImage) {
	    String tokenMaisSimilar = null;
	    int menorDistancia = Integer.MAX_VALUE;
	
	    for (String token : tokenImage) {
	        // Removemos as aspas dos tokens armazenados no array tokenImage para comparação correta
	        String tokenLimpo = token.replace("\"", "");
	
	        // Ignorar tokens que são apenas caracteres únicos ou não palavras-chave
	        if (tokenLimpo.length() < 2) continue;
	
	        int distancia = calculaSimilaridade(tokenInesperado, tokenLimpo);
	
	        if (distancia < menorDistancia) {
	            menorDistancia = distancia;
	            tokenMaisSimilar = tokenLimpo;
	        }
	    }
	    return tokenMaisSimilar;
	}
	
	public static int encontraSimilaridade(String palavra1, String palavra2) {
	    int tamanho = Math.min(palavra1.length(), palavra2.length());
	    int i = 0;
	    while (i < tamanho && palavra1.charAt(i) == palavra2.charAt(i)) {
	        i++;
	    }
	    return i; // Retorna o índice onde as palavras começam a divergir
	}

  public static String geraMensagemErro(Token tokenAtual, int[][] expectedTokenSequences, String[] tokenImage) {
    StringBuilder erro = new StringBuilder();

	// Encontra o token mais similar
    String tokenSugerido = encontraTokenSimilar(tokenAtual.image, tokenImage);

    int pontoDivergencia = encontraSimilaridade(tokenAtual.image, tokenSugerido);

    erro.append("\nErro comunismo funcionou na linha ")
        .append(tokenAtual.beginLine)
        .append(", coluna ")
        .append(tokenAtual.beginColumn + pontoDivergencia - 1)
        .append(".\n");

    erro.append("Foice inesperado: ").append(tokenAtual.image).append("\n");

    if (tokenSugerido != null) {
        erro.append("Martelo esperado: ").append(tokenSugerido).append("\n\n");
    }

    // Verifica se o token esperado é um símbolo importante ausente e gera mensagens apropriadas
    boolean faltaPontoVirgula = false;
    boolean faltaAbreParenteses = false;
    boolean faltaFechaParenteses = false;
    boolean faltaAbreChave = false;
    boolean faltaFechaChave = false;

    // Itera sobre os tokens esperados para verificar ausências comuns
    for (int[] seq : expectedTokenSequences) {
        for (int tokenIndex : seq) {
            String esperado = tokenImage[tokenIndex];
            if (esperado.equals("\";\"")) faltaPontoVirgula = true;
            if (esperado.equals("\"(\"")) faltaAbreParenteses = true;
            if (esperado.equals("\")\"")) faltaFechaParenteses = true;
            if (esperado.equals("\"{\"")) faltaAbreChave = true;
            if (esperado.equals("\"}\"")) faltaFechaChave = true;
        }
    }

    // Adiciona mensagens específicas para tokens faltantes
    if (faltaPontoVirgula) {
        erro.append("Erro de partilha de bens: Comunismo esperava compartilhar um ';' entre os camaradas.\n");
    }
    if (faltaAbreParenteses) {
        erro.append("Erro de partilha de bens: Comunismo esperava de você comunhar um '(' camarada.\n");
    }
    if (faltaFechaParenteses) {
        erro.append("Erro de partilha de bens: Comunismo esperava de você comunhar um ')' camarada.\n");
    }
    if (faltaAbreChave) {
        erro.append("Erro de partilha de bens: Comunismo esperava de você comunhar um '{' camarada.\n");
    }
    if (faltaFechaChave) {
        erro.append("Erro de partilha de bens: Comunismo esperava de você comunhar um '}' camarada.\n");
    }

    erro.append(tokenAtual.image).append("\n");
    erro.append(" ".repeat(pontoDivergencia) + "^\n");
    
    return erro.toString();
  }

  private int getLineCount() { return lineCount; }
  private int getTokenCount() { return tokenCount; }
}

PARSER_END(Computin)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* PALAVRAS RESERVADAS */
{
  < MAIN : "suka_blyat" >				// main principal
| < TIPOINT : "marikhuana" >			// tipo int
| < TIPOFLOAT : "missil" >			 	// tipo float
| < TIPOSTRING : "stroka" > 			// tipo string
| < IF : "kommunizm" > 					// if
| < ELSE : "ne_rabotayet" > 			// else
| < WHILE : "mezhdu_serpom_i_molotom" > // while
| < FOR : "tsar_bomba" >	 			// for loop
}

TOKEN : /* OPERADORES */
{
  < MAIS  		 : "dobavleniye" > // Operador de adição
| < MENOS 		 : "vychitaniye" > // Operador de subtração
| < MULT  		 : "umnozheniye" > // Operador de multiplicação
| < DIVIS 		 : "razdeleniye" > // Operador de divisão
| < IGUAL 		 : "ravnyy" > // Operador de atribuição
| < NOT   		 : "net" >			 // Operador de negação
| < MAIOR 		 : "bolshe" >		 // condicional maior
| < MENOR 		 : "neznachitelnyy" > // condicional menor
| < AND   		 : "zatem" >			 // operador e
| < OR 	  		 : "ili" >			 // operador ou
| < EQ    		 : "uk" >			 // equals
| < PONTOVIRGULA : ";" >	 		// Ponto e vírgula para finalizar instruções
| < VIRGULA 	 : "," >			 // Vírgula para expressões
| < ABREPAREN 	 : "(" >	 // Parêntese esquerdo
| < FECHAPAREN 	 : ")" >	 // Parêntese direito
| < ABRECHAVE 	 : "{" >	 // Chave esquerda para abrir bloco
| < FECHACHAVE 	 : "}" >	 // Chave direita para fechar bloco
}

TOKEN : /* IDENTIFICADORES */
{
  < ID : [ "a"-"z", "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >	 // Identificadores
| < EXPRESSAO_INT : [ "0"-"9" ] ([ "0"-"9" ])* >					 // inteiro
| < EXPRESSAO_FLOAT : [ "0"-"9" ] ([ "0"-"9" ])* "." [ "0"-"9" ] ([ "0"-"9" ])* >	 // ponto flutuante
| < EXPRESSAO_STRING : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", "_", " " ])* "\"" > // string
}

void start() :
{}
{
  < MAIN > < ABREPAREN > < FECHAPAREN > < ABRECHAVE >
  (
    try { 
    	declaracao()
  	} catch (ParseException e) {
        List<Token> errorTokens = new ArrayList<>();
        List<int[][]> expectedTokenSequences = new ArrayList<>();
		List<String[]> tokenImages = new ArrayList<>();
		
        errorTokens.add(e.currentToken);
        expectedTokenSequences.add(e.expectedTokenSequences);
        tokenImages.add(e.tokenImage);

        Token t = e.currentToken;

        // Definindo o conjunto de tokens válidos para seguir após um erro (follow)
        Set<Integer> followSet = new HashSet<>(Arrays.asList(
            PONTOVIRGULA, VIRGULA, FECHAPAREN, FECHACHAVE, ABREPAREN, ABRECHAVE, // Tokens de fechamento
            MAIN, TIPOINT, TIPOFLOAT, TIPOSTRING, IF, ELSE, WHILE, FOR, // Palavras reservadas
            MAIS, MENOS, MULT, DIVIS, NOT, MAIOR, MENOR, AND, OR, EQ, // Operadores
            ID // Identificadores
        ));

        // Ignora tokens do tipo SKIP (espaços, tabulações, quebras de linha)
        /*while (t.kind == ' ' || t.kind == '\t' || t.kind == '\n' || t.kind == '\r') {
            t = getNextToken();
        }*/

        // Avança até encontrar um token válido do follow set
        do {
            t = getNextToken(); 
        } while (!followSet.contains(t.kind));
        setErrorHapenned(true);
        setErrorTokens(errorTokens);
        addExpectedTokenSequences(expectedTokenSequences);
        addTokenImage(tokenImages);
    }
  )*
  < FECHACHAVE >
}

void declaracao() :
{ }
{
    //try {
        declaraVariavel()
        | testeCondicao()
        | lacoWhile()
        | lacoFor()
        | atribuicao()
    /*} catch (ParseException e) {
        List<Token> errorTokens = new ArrayList<>();
        List<int[][]> expectedTokenSequences = new ArrayList<>();
		List<String[]> tokenImages = new ArrayList<>();
		
        errorTokens.add(e.currentToken);
        expectedTokenSequences.add(e.expectedTokenSequences);
        tokenImages.add(e.tokenImage);

        Token t = e.currentToken;

        // Definindo o conjunto de tokens válidos para seguir após um erro (follow)
        Set<Integer> followSet = new HashSet<>(Arrays.asList(
            PONTOVIRGULA, VIRGULA, FECHAPAREN, FECHACHAVE, ABREPAREN, ABRECHAVE, // Tokens de fechamento
            MAIN, TIPOINT, TIPOFLOAT, TIPOSTRING, IF, ELSE, WHILE, FOR, // Palavras reservadas
            MAIS, MENOS, MULT, DIVIS, NOT, MAIOR, MENOR, AND, OR, EQ, // Operadores
            ID // Identificadores
        ));

        // Ignora tokens do tipo SKIP (espaços, tabulações, quebras de linha)
        while (t.kind == ' ' || t.kind == '\t' || t.kind == '\n' || t.kind == '\r') {
            t = getNextToken();
        }

        // Avança até encontrar um token válido do follow set
        do {
            t = getNextToken(); 
        } while (!followSet.contains(t.kind));
        setErrorHapenned(true);
        setErrorTokens(errorTokens);
        addExpectedTokenSequences(expectedTokenSequences);
        addTokenImage(tokenImages);
    }*/
}

void declaraVariavel() :
{}
{
    tipoVariavel() <ID> (inicializacao())? ( <VIRGULA> <ID> (inicializacao())? )* <PONTOVIRGULA>
}

void tipoVariavel() :
{}
{
    <TIPOINT> | <TIPOFLOAT> | <TIPOSTRING>
}

void inicializacao() :
{}
{
    <IGUAL> expressao()
}

void expCondicionalUnica() :
{}
{
  termo()
  (
    < EQ > // igualdade
  | < NOT > < IGUAL > // diferente
  | < MENOR > (< IGUAL >)? // menor ou menor igual
  | < MAIOR > (< IGUAL >)? // maior ou maior igual
  )
  termo()
}

// Estrutura condiciona do if
void expCondicional() :
{}
{
	  expCondicionalUnica()
	  (
		( < AND > | < OR > )
		expCondicionalUnica()
	  )*
}

void atribuicao() :
{}
{
  < ID > < IGUAL > expressao() < PONTOVIRGULA >
}

void expressao() :
{}
{
  (
	termo()
  )?
  (
    (< MAIS > | < MENOS > | < MULT > | < DIVIS >)
    termo()
  )*
}

void termo() :
{}
{
    < EXPRESSAO_INT >
  | < EXPRESSAO_FLOAT >
  | < EXPRESSAO_STRING >
  | < ID >
}

void testeCondicao() :
{}
{
  < IF > < ABREPAREN > expCondicional() < FECHAPAREN > < ABRECHAVE > (declaracao())* < FECHACHAVE >
  (
    < ELSE > < ABRECHAVE > (declaracao())* < FECHACHAVE >
  )?
}

void lacoWhile() :
{}
{
  < WHILE > < ABREPAREN > expCondicional() < FECHAPAREN > < ABRECHAVE >
  (
    declaracao()
  )*
  < FECHACHAVE >
}

void lacoFor() :
{}
{
  < FOR > < ABREPAREN > 
  (< ID > < IGUAL > < EXPRESSAO_INT >) < PONTOVIRGULA > 
  expCondicionalUnica() < PONTOVIRGULA > 
  < ID >
  (
    < MAIS > (< MAIS > | < IGUAL > < EXPRESSAO_INT >) | < MENOS >
    ( < MENOS > | < IGUAL > < EXPRESSAO_INT > )
  )
  < FECHAPAREN > 
  < ABRECHAVE >
  (
    declaracao()
  )*
  < FECHACHAVE >
}